cameras:
    perspective:
        type: perspective
        #focal_length: 1
        focal_length: [[16, 2], [17, 2.5], [18, 3], [19, 4], [20, 6]] # pairs of [zoom, focal len]
        vanishing_point: [0, -1000] # relative to center of screen, in pixels
    #isometric:
    #    type: isometric
    #    axis: [0,1]
lights:
    directional1:
        type: directional
        direction: [0.293,-0.861,-0.415]
        ambient: .5
        diffuse: .9
        specular: 1.
    point1:
        type: point
        position: [0, -100, 0px]
        origin: ground
        ambient: .2
        diffuse: .2
        specular: .5
styles:
    windows:
        url: styles/windows.yaml

    buildings:
        base: polygons
        shaders:
            blocks:
                color: |
                    color.rgb *= vec3(min((v_world_position.z*.001 + .6),1.));
sources:
    osm:
        type: TopoJSON
        url:  https://vector.mapzen.com/osm/all/{z}/{x}/{y}.topojson?api_key=vector-tiles-rKpnpkD
        max_zoom: 16
    NOAA:
        type: GeoJSON
        url: http://csc-s-gis1-d:6080/arcgis/rest/services/Test/MA/MapServer

layers:
    slr:
        data: { source: NOAA }
        draw:
            polygons:
                order: function() { return feature.sort_key; }
                color: '#3333ff'

        extruded:
            draw:
                polygons:
                    style: buildings
                    extrude: function () { return feature.slr > 0 || $zoom >= 16; }
                    
    buildings:
        data: { source: osm }
        draw:
            polygons:
                order: function() { return feature.sort_key; }
                color: [.6, .6, .6]
                style: windows
                # at z14, only extrude buildings over 5 m; at z16 and higher, extrude all buildings
                extrude: function () { return (($zoom >= 14 && feature.height > 5) || $zoom >= 16) }
        # buildings with a name only
        namedBuildings:
            filter: { name: true }
            draw:
                polygons:
                    color: [.6, .2, .2]
            # buildings with a name and a kind
            namedKindBuildings:
                filter: { kind: true }
                draw:
                    polygons:
                        color: [.6, .2, .6]
        # buildings with a kind only
        kindBuildings:
            filter: { name: false, kind: true }
            draw:
                polygons:
                    color: [.2, .2, .6]
                    
    earth:
        data: 
            source: osm
            layer: earth
        draw:
            polygons:
                order: function() { return feature.sort_key; }
                color: [0.175, 0.175, 0.175]

    landuse:
        data:
            source: osm
            layer: landuse
        draw:
            polygons:
                order: function() { return feature.sort_key; }
                color: [0.5, 0.875, 0.5]
        pitch:
            filter:
                kind: ['pitch', 'garden', 'playground']
            draw:
                polygons:
                    color: [0.3, 0.675, 0.3]

    water:
        data:
            source: osm
            layer: water
        draw:
            polygons:
                order: function() { return feature.sort_key; }
                color: [0.5, 0.5, 0.875]
        outline:
            # don't draw outlines on ocean or riverbank features
            filter: {not: {kind: [ocean, river, riverbank]}}
            draw:
                lines:
                    color: [0.6, 0.6, 0.975]
                    order: function() { return feature.sort_key; }
                    width: function () {
                            return (
                                $zoom >= 16 && (2.5 * Math.log($zoom))
                            );
                        }

    roads:
        data:
            source: osm
            layer: roads
        draw:
            lines:
                order: function () { return feature.sort_key; }
                outline:
                    color: [0.7, 0.7, 0.7]
                    width: 1
        highway:
            filter: { kind: highway }
            draw:
                lines:
                    color: [1.0, 1.0, 1.0]
                    width: 9
            tunnel:
                filter: { is_tunnel: yes }
                draw:
                    lines:
                        color: '#333'
                        width: 6
                        outline:
                            order: 352 # magic number
                            color: white
                            width: 1
        major_road:
            filter: { kind: major_road }
            draw:
                lines:
                    color: [0.5, 0.5, 0.5]
                    width: 5
        minor_road:
            filter: { kind: minor_road }
            draw:
                lines:
                    color: [0.65, 0.65, 0.65]
                    width: 4
        path:
            filter:
               kind: path
            draw:
                lines:
                    color: [0.8, 0.8, 0.8]
                    width: 3
        rail:
            filter:
                kind: rail
                not: { is_tunnel: yes }
            draw:
                lines:
                    color: [0.5, 0.0, 0.0]
                    width: 3
                    outline:
                        order: 352 # magic number
                        width: .5

    road_labels:
        data: { source: osm, layer: roads }
        filter: { name: true, aeroway: false, tunnel: false, railway: false, not: { kind: [rail, ferry] } }

        highway:
            filter: { kind: highway, $zoom: { min: 7 } }
            draw:
                text:
                    order: function() { return feature.sort_key; }
                    font:
                        fill: black
                        weight: 500
                        size: 12px
                        family: Helvetica
        not_highway:
            filter: { not: { kind: highway }, $zoom: { min: 15 } }
            draw:
                text:
                    order: function() { return feature.sort_key; }
                    font:
                        fill: black
                        weight: 100
                        size: 11px
                        family: Helvetica
